!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("Container",[],e):"object"==typeof exports?exports.Container=e():t.Container=e()}(this,(function(){return(()=>{"use strict";var t={240:(t,e,s)=>{s.r(e),s.d(e,{Container:()=>r});class r{constructor(t){this.factories={},this.shared={},this.instances={},this.aliases={},this.factoryContexts={},this.parent=t}factory(t,e){return this.factories[t]=e,this}sharedFactory(t,e){return this.factory(t,e),this.setShared(t,!0),this}alias(t,e){return this.aliases[t]=e,this}setShared(t,e){return t=this.resolveAlias(t),this.shared[t]=e,this}resolveAlias(t){return this.aliases[t]?this.aliases[t]:t}set(t,e){return this.instances[t]=e,this}get(t,e){if(t=this.resolveAlias(t),this.instances[t])return this.instances[t];const s=this.getFactory(t)(this.resolveFactoryContext(t),e);return this.shared[t]&&(this.instances[t]=s),s}getFactory(t){const e=this.resolveAlias(t);if(this.factories[e])return this.factories[e];if(this.parent)return this.parent.getFactory(e);throw new Error("Factory with name '{ name }' isnt set")}unsetFactory(t){return this.factories[t]&&delete this.factories[t],this.parent&&this.parent.unsetFactory(t),this}unsetAlias(t){return delete this.aliases[t],this.parent&&this.parent.unsetAlias(t),this}build(t){return new n(this,t)}when(t){return new i(this,t)}addContextualBinding(t,e,s){const r=this.resolveFactoryContext(t);return"string"==typeof s?(r.unsetFactory(e),r.alias(e,s),this):(r.unsetAlias(e),r.factory(e,s),this)}resolveFactoryContext(t){return this.factoryContexts[t]||(this.factoryContexts[t]=new r(this)),this.factoryContexts[t]}global(){return this.parent?this.parent.global():this}}class i{constructor(t,e){this.container=t,this.name=e}needs(t){return this.dependency=t,this}give(t){return this.container.addContextualBinding(this.name,this.dependency,t),this}}class n{constructor(t,e){this.name=e,this.container=new r(t)}needs(t){return this.dependency=t,this}give(t){return this.container.addContextualBinding(this.name,this.dependency,t),this}get(t){return this.container.get(this.name,t)}}}},e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,s),i.exports}return s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s(240)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,